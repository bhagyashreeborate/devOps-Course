
 DEVOPS


 URLs
github: www.github.com
chef: www.chef.io
ansible: www.ansible.com
Jenkins: https://jenkins-ci.org/
GIT repositories used
https://github.com/wardviaene/ansible-demo
https://github.com/wardviaene/chef-demo
https://github.com/wardviaene/play-demo
https://github.com/wardviaene/docker-demo
Instructions
AWS Account: https://github.com/wardviaene/ansible-demo/raw/mas...
Forum & Support
Facebook: https://www.facebook.com/groups/840062592768074/

-----------------------------------------------------------------

docker
chef
kubernetes

------------------------------------------------------

Developer says its runs on my machine
whereas
sysadmin / operaions says it dosent

developers uses aglie strategies / want to add - modify features
whereas
operations are static / want to create - change services


Software deployment is all of the activties that makes the sw system available to use.



 -----------------------------------------

 DEVOPS 

 It is an approch to bridge the gap between sw development and operations.
 it is a responsibility for interdependace bet sw dev and ope.

 --------------------------------------------------------------

 Continous Delivery

 Developer = build  - test [plan - monitor] - release = Customer
feedback loop from customer

CD is where the complete SDLC works well.
Devops - it works well when SDLC can be fitted
this can be done well when devlopers and operatiosn work together.

The ability to scale based on time and load is not a benefit of CD.

------------------------------

Devops is a transformation

new technologies.
faster deployments
less errors
quick feedbacks.

--------------------
better for developers
more agile process
better for customers
-----------------

Lean Thinking ---

Lean thinking is where organizatios-
get ideas from productions fast
have customer tring features
get validated feedback

to get thisdevops with faster sw deilvery

-----
devops is change of culture

more than just tools its practice of deve and opers participating together in entire SDLC.

-----

tools - 
cloud computing - aws
infrastrcutre as code - chef puppet ansible saltstack
buld and test  using CI - jenkins
containerzations - docker

---
development envi - as a service - c9.io
build tols = e.g jira
provisionng deployment - as a service - aws
platform as a service - heroku.

--------------------------------------------------------------------

VERSION CONTROL -

previously -  CVS or SVN (subversion)

Now - GIT - free and open source distributed version control system designed to handle small to large projects with speed and efficiency. 
developers for the sw product
operations - for automation - to store scripts, tools , sw config.

Distributed version control ??? =
means multiple users can work on the master without any conflicts and rolback in case of issues.

git commit  - git push - git pull  - git merge
gitflow defines a strict branching model desinged around the projet release - 
	master develop feature feature
	first on feature then develop and then release the build by master.

-------------------------------------------


PROVISIONING -

The prepration of the INFRASTRUCTURE to run your application.

IASS - infrast as a service
here you will get virtual machine linux/ windows and you have to manage the OS

Dabase as a service - here you will get the machine and os will be mantained - Amazon RDS (relational database service)

Platform as a service - here you will get os and it will be maintained - Amazon Elastic beanstalk.


-----------------------------------------------------------------------------------------------------------------------------------------


VAGRANT

Vagrant for Windows Procedures
Section 3, Lecture 14
Vagrant for Windows procedures
Follow these procedures only if you want to use Vagrant with Windows.

1. Download the software
Download the latest Virtualbox from https://www.virtualbox.org/
Download the latest Vagrant from https://www.vagrantup.com/
Download putty and puttygen from http://www.chiark.greenend.org.uk/~sgtatham/putty/...
2. Convert the vagrant private key
Using puttygen you downloaded from the putty website, convert the OpenSSH private key to a putty-readable key:

Make sure your vagrant box is running (vagrant up in project folder)
Type the command vagrant ssh-config to display the ssh configuration. You can find the path to the private key next to IdentityFile
Open puttygen
Click on the Load button
Navigate to the path shown by vagrant ssh-config (next to IdentityFile)
Select the private_key
Now click on the “Save private key” button and save the file as .ppk file somewhere where you can easily find it
3. Use putty to log into your Vagrant machines
Open putty and configure the following parameters:

Session:
Host: 127.0.0.1
Port: 2222 and up (depends on how many vagrant machines you launch)
Connection
Data
Auto-login username: vagrant
Connection/SSH
Auth
Private key file for authentication: Click on browse and select your ppk file
Session
Save the session to save the parameters you just entered
4. Alternatives
You can also use the login/password combination “vagrant” / “vagrant”, but then you will have to enter it manually every time
When configuring vagrant in the next lectures, I’ll often use a private IP address. You can use this private IP address with port 22 instead of 127.0.0.1:2222